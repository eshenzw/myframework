package com.myframework.util;

import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.util.Collection;
import java.util.Iterator;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.CollectionUtils;
import org.springframework.util.ObjectUtils;

/**
 * 字符串公用操作.
 * 
 * @DateTime: 2011-3-4
 * @author author
 * @version 1.0
 */
public final class StringUtil
{
	// 日志
	private static Logger LOGGER = LoggerFactory.getLogger(StringUtil.class);

	public static final String ENCODE_UTF8 = "UTF-8";

	/** The Constant HASH_TYPE_MD5. */
	public static final String HASH_TYPE_MD5 = "MD5";
	/** The Constant HASH_TYPE_SHA1. */
	public static final String HASH_TYPE_SHA1 = "SHA-1";
	/** The Constant PY_PREFIX. */
	private static final String PY_PREFIX = "";
	/**
	 * 用于替换换行符的HTML BR String<br>
	 * 括号和BR之间不能有其他内容,否则IE不会表示为换行<br>
	 * Notice:如果需要修改这个常量定义,必须相应修改ISO_8859_1.java 中的Filter 定义
	 */
	private static final String BR_FOR_NEW_LINE = "<Br />";
	private static final String CS_ENCODE = "AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz01234567890123456789";

	/**
	 * 私有构造函数
	 */
	private StringUtil()
	{

	}

	/**
	 * 如果对象Null或"null"返回空字符串.
	 * 
	 * @param obj
	 *            需要toString的对象
	 * @return string 返回非空的字符串
	 */
	public static String notNull(Object obj)
	{
		return notNull(obj, false);
	}

	/**
	 * Not null.
	 * 
	 * @param obj
	 *            the obj
	 * @param stutas
	 *            the stutas 是否严格校验 "null"字符串
	 * @return the string
	 */
	public static String notNull(Object obj, boolean stutas)
	{
		String strString = "";
		if (obj != null)
		{
			if (stutas)
			{
				strString = obj.toString();
			}
			else
			{
				strString = obj.toString().trim();
				if ("null".equals(strString))
				{
					return "";
				}
			}
		}
		return strString;
	}

	/**
	 * 是否为空
	 * 
	 * @param obj
	 *            对象
	 * @return 是否为空
	 */
	public static boolean isNull(Object obj)
	{
		if (obj != null)
		{
			String str = obj.toString().trim();
			return str.isEmpty() || "null".equals(str.toLowerCase());
		}
		else
		{
			return true;
		}
	}

	/**
	 * 对象转换为String字符串
	 * 
	 * @param value
	 *            输入对象
	 * @return String
	 */
	public static String valueOf(Object value)
	{
		return value != null ? String.valueOf(value).trim() : "";
	}

	/**
	 * Checks if is empty.
	 * 
	 * @param str
	 *            the str
	 * @return true, if is empty
	 */
	public static boolean isEmpty(Object str)
	{
		return str == null || str.toString().isEmpty();
	}

	/**
	 * Checks if is not empty.
	 * 
	 * @param str
	 *            the str
	 * @return true, if is not empty
	 */
	public static boolean isNotEmpty(Object str)
	{
		return !StringUtil.isEmpty(str);
	}

	public static boolean isNullOrWhiteSpace(String str){
		return (str == null || str.isEmpty() || str.trim().equals(""));
	}

	public static boolean isNullOrEmpty(String str){
		return (str == null || str.isEmpty() || str.equals(""));
	}

	/**
	 * 替换字符串里面的占位符
	 * @param str 待替换的字符串
	 * @param arr 参数数组
	 * @return 返回替换后的字符串
	 */
	public static String replaceData(String str, String[] arr) {
		if (isEmpty(str) || arr == null || arr.length == 0) {
			return str;
		}
		for (String s : arr) {
			str = str.replaceFirst("\\{\\?\\}", s);
		}
		return str;
	}

	/**
	 * 方法定义：toBoolean<br>
	 * 用途说明： 将字符串y|yes|true|1 转换成true否则false<br>
	 * 例如：toBoolean("y") 返回true.
	 * 
	 * @param theString
	 *            需要判断的字符串
	 * @return boolean 返回布尔值true|false
	 */
	public static boolean toBoolean(String theString)
	{
		if (theString == null)
		{
			return false;
		}
		theString = theString.trim();
		if (theString.equalsIgnoreCase("y") || theString.equalsIgnoreCase("yes") || theString.equalsIgnoreCase("true")
				|| theString.equalsIgnoreCase("1"))
		{
			return true;
		}
		return false;
	}

	/**
	 * 对象转换为boolean型变量
	 * 
	 * @param obj
	 *            对象
	 * @return Boolean
	 */
	public static boolean toBoolean(Object obj)
	{
		if (obj == null)
		{
			return false;
		}
		return toBoolean(obj.toString());
	}

	/**
	 * 处理字符串，为null时返回空串
	 * 
	 * @param s
	 *            输入字符串
	 * @return 处理结果字符串
	 */
	public static String nvl(String s)
	{
		return nvl(s, "");
	}

	/**
	 * 带默认值处理字符，为null时返回默认值
	 * 
	 * @param s
	 *            输入字符串
	 * @param defaultValue
	 *            默认值
	 * @return 输出字符串
	 */
	public static String nvl(String s, String defaultValue)
	{
		if (s == null || "".equals(s) || "null".equals(s))
		{
			s = defaultValue;
		}
		return s;
	}

	/**
	 * 使用分隔符连接字符串
	 * 
	 * @param arrays
	 *            字符数组
	 * @param split
	 *            分隔符
	 * @return 结果
	 */
	public static String joinWith(String[] arrays, String split)
	{
		if (arrays == null)
		{
			return "";
		}
		StringBuffer sub = new StringBuffer();
		for (int i = 0; i < arrays.length; i++)
		{
			if (i == 0)
			{
				sub.append(valueOf(arrays[i]));
			}
			else
			{
				sub.append(split).append(valueOf(arrays[i]));
			}
		}
		return sub.toString();
	}

	/**
	 * 将字符串按指定加密类型加密支持MD5 SHA-1.
	 * 
	 * @param data
	 *            需要Hash的字符串
	 * @param type
	 *            加密类型 （"MD5" or "SHA-1"）
	 * @return 返回的加密字串，SHA1是产生一个20字节的二进制数组
	 */
	public static synchronized String hashKey(String data, String type)
	{
		MessageDigest digest = null;
		if (digest == null)
		{
			try
			{
				digest = MessageDigest.getInstance(type);
				digest.update(data.getBytes(ENCODE_UTF8));
			}
			catch (Exception nsae)
			{
				System.err.println("Failed to load the MD5 MessageDigest. ");
			}
		}
		return byteToHex(digest.digest());
	}

	/**
	 * 字符串不能为"" 或 null 如果是则返回异常.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            是null或空白时,相应的错误提示信息
	 * @throws IllegalArgumentException
	 *             是一个RuntimeException运行时异常不强制捕获异常，如果需要时可以主动捕获异常。
	 */
	public static void assertNotBlank(String theString, String theMessage)
	{
		if (theString == null)
		{
			throw new IllegalArgumentException("Null argument not allowed: " + theMessage);
		}
		if ("".equals(theString.trim()))
		{
			throw new IllegalArgumentException("Blank argument not allowed: " + theMessage);
		}
	}

	/**
	 * 判断指定的String是否为一个Integer 整数.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            不是number时,相应的错误提示信息
	 * @return the int
	 * @throws IllegalArgumentException
	 *             如果表示number,则throw 此exception,
	 * @see #assertNotBlank(String,String)
	 */
	public static int assertInteger(String theString, String theMessage)
	{
		assertNotBlank(theString, theMessage);
		try
		{
			int result = Integer.parseInt(theString);
			return result;
		}
		catch (NumberFormatException e)
		{
			throw new IllegalArgumentException("[" + theString + "]is not a integer value." + theMessage);
		}
	}

	/**
	 * 判断指定的String是否为一个boolean.
	 * 
	 * @param theString
	 *            需要断言的字符串
	 * @param theMessage
	 *            不是boolean时,相应的错误提示信息
	 * @throws IllegalArgumentException
	 *             如果表示boolean,则throw 此exception,
	 * @see #assertNotBlank(String,String)
	 */
	public static void assertBoolean(String theString, String theMessage)
	{
		assertNotBlank(theString, theMessage);
		if (!(theString.equalsIgnoreCase("yes") || theString.equalsIgnoreCase("true")
				|| theString.equalsIgnoreCase("no") || theString.equalsIgnoreCase("false")
				|| theString.equalsIgnoreCase("y") || theString.equalsIgnoreCase("n")))
		{
			throw new IllegalArgumentException("[" + theString + "]is not a boolean value." + theMessage);
		}
	}

	/**
	 * 用于把Request para 的encoding <br>
	 * 从缺省的ISO8859-5 转换为指定的Encoding.
	 * 
	 * @param value
	 *            the value
	 * @param newEncoding
	 *            , if = null, default set to "GBK"
	 * @return 做过Encoding变换的String
	 * @history 2004/06/25 getBytes的时候应该指定用ISO-8859-1
	 */
	public static String convertEncoding(String value, String newEncoding)
	{
		if (value == null)
		{
			return "";
		}
		if (newEncoding == null)
		{
			newEncoding = "GBK";
		}
		try
		{
			return new String(value.getBytes("ISO-8859-1"), newEncoding);
		}
		catch (UnsupportedEncodingException e)
		{
			return e.toString();
		}
	}

	/**
	 * 字节数组转换为十六进制字符串.
	 * 
	 * @param hash
	 *            需要转换的字节数组
	 * @return 返回的十六进制字符串
	 */
	public static String byteToHex(byte[] hash)
	{
		StringBuffer buf = new StringBuffer(hash.length * 2);
		int i;
		for (i = 0; i < hash.length; i++)
		{
			if ((hash[i] & 0xff) < 0x10)
			{
				buf.append("0");
			}
			buf.append(Long.toString(hash[i] & 0xff, 16));
		}
		return buf.toString();
	}

	/**
	 * 字节数组转换为字符串 byteToString
	 * 
	 * @param by
	 *            字节数组
	 * @param encode
	 *            字节编码
	 * @return 字节数组转换为字符串
	 */
	public static String byteToString(byte[] by, String encode)
	{
		try
		{
			return new String(by, encode);
		}
		catch (UnsupportedEncodingException e)
		{
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * 字节数组转换为字符串 byteToString
	 * 
	 * @param by
	 *            字节数组
	 * @return 字节数组转换为默认utf8字符串
	 */
	public static String byteToString(byte[] by)
	{
		return byteToString(by, ENCODE_UTF8);
	}

	public static byte[] stringToByte(String s)
	{
		return stringToByte(s, ENCODE_UTF8);
	}

	public static byte[] stringToByte(String s, String encode)
	{
		if (s == null)
		{
			return null;
		}
		try
		{
			return s.getBytes(encode);
		}
		catch (UnsupportedEncodingException e)
		{
			LOGGER.warn(String.format("字符串转为字节数组出错: %s", s), e);
		}
		return null;
	}
/**
	 * 对字符串进行处理，使得它能够在HTML页面上进行正常表示 <br />
	 * 具体转换的内容是： <table border="1">
	 * <tr>
	 * <td>原内容</td>
	 * <td>转换后</td>
	 * </tr>
	 * <tr>
	 * <td>"<" </td>
	 * <td>"&amp;lt;" </td>
	 * </tr>
	 * <tr>
	 * <td>">" </td>
	 * <td>"&amp;gt;" </td>
	 * </tr>
	 * <tr>
	 * <td>"&" </td>
	 * <td>"&amp;amp;" </td>
	 * </tr>
	 * <tr>
	 * <td>"\"' </td>
	 * <td>"&amp;quot;" </td>
	 * </tr>
	 * <tr>
	 * <td>"\r" </td>
	 * <td> "&lt;BR&gt;"</td>
	 * </tr>
	 * <tr>
	 * <td>"\n" </td>
	 * <td>"&lt;BR&gt;" </td>
	 * </tr>
	 * <tr>
	 * <td>"\t" </td>
	 * <td>4个Space </td>
	 * </tr>
	 * <tr>
	 * <td>Space </td>
	 * <td>"&amp;nbsp;" </td>
	 * </tr>
	 * </table>.
	 * 
	 * @param value
	 *            目标字符串
	 * @return 返回字符串
	 */
	public static String filter(String value)
	{
		if (value == null)
		{
			return null;
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < value.length(); i++)
		{
			char ch = value.charAt(i);
			if (ch == '<')
			{
				result.append("&lt;");
			}
			else if (ch == '>')
			{
				result.append("&gt;");
			}
			else if (ch == '&')
			{
				result.append("&amp;");
			}
			else if (ch == '"')
			{
				result.append("&quot;");
			}
			else if (ch == '\'')
			{
				result.append("&#39;");
			}
			else if (ch == '\r')
			{
				result.append("<BR>");
			}
			else if (ch == '\n')
			{
				if (i > 0 && value.charAt(i - 1) == '\r')
				{
				}
				else
				{
					result.append("<BR>");
				}
			}
			else if (ch == '\t')
			{
				result.append("&nbsp;&nbsp;&nbsp;&nbsp;");
			}
			else if (ch == ' ')
			{
				result.append("&nbsp;");
			}
			else
			{
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * 对目前的支持Word联动的HTML编辑器的Filter功能.
	 * 
	 * @param value
	 *            the value
	 * @return String
	 */
	public static String filterForHtmlEditor(String value)
	{
		if (value == null)
		{
			return null;
		}
		StringBuffer result = new StringBuffer();
		for (int i = 0; i < value.length(); i++)
		{
			char ch = value.charAt(i);
			if (ch == '\r')
			{
				result.append("");
			}
			else if (ch == '\n')
			{
				if (i > 0 && value.charAt(i - 1) == '\r')
				{
				}
				else
				{
					result.append("");
				}
			}
			else if (ch == '\t')
			{
				result.append("    ");
			}
			else
			{
				result.append(ch);
			}
		}
		return result.toString();
	}

	/**
	 * 数字转换成字母.
	 * 
	 * @param number
	 *            the number
	 * @param upperCaseFlag
	 *            大小写标示
	 * @return java.lang.String
	 * @throws Exception
	 *             the exception
	 */
	public static String numberToLetter(int number, boolean upperCaseFlag) throws Exception
	{
		// add nine to bring the numbers into the right range (in java, a= 10, z
		// = 35)
		if (number < 1 || number > 26)
		{
			throw new Exception("The number is out of the proper range (1 to " + "26) to be converted to a letter.");
		}
		int modnumber = number + 9;
		char thechar = Character.forDigit(modnumber, 36);
		if (upperCaseFlag)
		{
			thechar = Character.toUpperCase(thechar);
		}
		return "" + thechar;
	}

	/**
	 * 取得汉字拼音的首字母.
	 * 
	 * @param strCn
	 *            the str cn
	 * @return the PY prefix
	 */
	public static String getPYPrefix(String strCn)
	{
		if (strCn == null || strCn.trim().length() == 0)
		{
			return "";
		}
		String ret = "";
		for (int i = 0; i < strCn.length(); i++)
		{
			char ch = strCn.charAt(i);
			if ('\u4E00' <= ch && ch <= '\u9FA5')
			{
				ret = ret + PY_PREFIX.charAt(ch - 19968);
			}
			else
			{
				ret = ret + ch;
			}
		}
		return ret;
	}

	/**
	 * 字符串转换成整数.
	 * 
	 * @param value
	 *            the value
	 * @return the integer
	 */
	public static Integer string2Integer(String value)
	{
		if (value != null && value.length() > 0)
		{
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag)
			{
				return Integer.valueOf(value);
			}
			else
			{
				throw new NumberFormatException();
			}
		}
		else
		{
			return null;
		}
	}

	/**
	 * 字符串转换成长整数.
	 * 
	 * @param value
	 *            the value
	 * @return the long
	 */
	public static Long string2Long(String value)
	{
		if (value != null && value.length() > 0)
		{
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag)
			{
				return Long.valueOf(value);
			}
			else
			{
				throw new NumberFormatException();
			}
		}
		else
		{
			return null;
		}
	}

	/**
	 * 字符串转换成小数.
	 * 
	 * @param value
	 *            the value
	 * @return the big decimal
	 */
	public static BigDecimal string2BigDecimal(String value)
	{
		if (value != null && value.length() > 0)
		{
			boolean flag = Pattern.matches("-?[0-9]+(.[0-9]+)?", value);
			if (flag)
			{
				return new BigDecimal(value);
			}
			else
			{
				throw new NumberFormatException();
			}
		}
		else
		{
			return null;
		}
	}

	/**
	 * 字符串转换成短整数.
	 * 
	 * @param value
	 *            the value
	 * @return the short
	 */
	public static Short string2Short(String value)
	{
		if (value != null && value.length() > 0)
		{
			boolean flag = Pattern.matches("-?\\d+", value);
			if (flag)
			{
				return Short.valueOf(value);
			}
			else
			{
				throw new NumberFormatException();
			}
		}
		else
		{
			return null;
		}
	}

	/**
	 * 字符串转换成短整数.
	 * 
	 * @param value
	 *            the value
	 * @return the byte[]
	 */
	public static byte[] string2Blob(String value)
	{
		if (value != null && value.length() > 0)
		{
			return value.getBytes();
		}
		else
		{
			return null;
		}
	}

	/**
	 * To string.
	 * 
	 * @param object
	 *            object
	 * @return string
	 */
	public static String toString(Object object)
	{
		String value = String.valueOf(object);
		if ("null".equals(value))
		{
			return null;
		}
		return value;
	}

	/**
	 * 特殊字符转义.
	 * 
	 * @param specialCharacters
	 *            包含特殊字符的字符串
	 * @return 返回转义后的字符串
	 */
	public static String escapeSpecialCharacters(String specialCharacters)
	{
		return specialCharacters.replaceAll(Pattern.quote("\\"), "\\\\\\\\").replaceAll("%", "\\\\%")
				.replaceAll("_", "\\\\_");
	}

	public static String escapeSql(String str)
	{
		if (str != null)
			return str.replaceAll(Pattern.quote("\\"), "\\\\\\\\").replaceAll("%", "\\\\%").replaceAll("_", "\\\\_")
					.replaceAll("'", "\\\\'");
		else
			return null;
	}

	/**
	 * 用给定的分割符连接集合中Bean的属性值
	 * 
	 * @param coll
	 *            Bean集合
	 * @param propertyName
	 *            bean的属性名称
	 * @param delim
	 *            分割符
	 * @return
	 */
	public static String collectionToDelimitedString(Collection<?> coll, String propertyName, String delim)
	{
		if (CollectionUtils.isEmpty(coll) || isEmpty(propertyName))
		{
			return "";
		}
		StringBuffer sb = new StringBuffer();
		Iterator<?> it = coll.iterator();
		while (it.hasNext())
		{
			try
			{
				sb.append(BeanUtils.getProperty(it.next(), propertyName));
			}
			catch (Exception e)
			{
				LOGGER.warn(String.format("糟糕，从%s中获取属性%s值出错了", it.next().getClass().getName(), propertyName));
				break;
			}

			if (it.hasNext())
			{
				sb.append(delim);
			}
		}
		return sb.toString();
	}

	public static String collectionToDelimitedString(Collection<?> coll, String propertyName, String filterName,
			Object filterValue, String delim)
	{
		if (CollectionUtils.isEmpty(coll) || isEmpty(propertyName))
		{
			return "";
		}
		StringBuffer sb = new StringBuffer();
		Iterator<?> it = coll.iterator();
		while (it.hasNext())
		{
			try
			{
				Object bean = it.next();
				String value = BeanUtils.getProperty(bean, filterName);
				if (filterValue == null ? value == null : filterValue.equals(value))
				{
					sb.append(BeanUtils.getProperty(bean, propertyName));
					sb.append(delim);
				}

			}
			catch (Exception e)
			{
				LOGGER.warn(String.format("糟糕，从%s中获取属性%s值出错了", it.next().getClass().getName(), propertyName));
				break;
			}

		}
		if (sb.length() > 0)
		{
			sb.deleteCharAt(sb.length() - 1);
		}
		return sb.toString();
	}

	public static String arrayToDelimitedString(Object[] arr, String delim)
	{
		if (ObjectUtils.isEmpty(arr))
		{
			return "";
		}
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < arr.length; i++)
		{
			Object value = arr[i];
			if (StringUtil.isNotEmpty(value))
			{
				if (i > 0)
				{
					sb.append(delim);
				}
				sb.append(value);
			}

		}
		return sb.toString();
	}

	/**
	 * 判断字符串是否为安全字符 允许输入数字、大小写英文字母、下划线
	 * 
	 * @param s
	 *            字符串
	 * @return 是否匹配
	 */
	public static boolean isCodeString(String s)
	{
		if (isEmpty(s))
		{
			return true;
		}
		else
		{
			return Pattern.matches("[0-9a-zA-Z_]+", s);
		}
	}

	/**
	 * 判断字符串是否为安全字符 允许输入中文、数字、大小写英文字母、下划线
	 * 
	 * @param s
	 *            字符串
	 * @return 是否匹配
	 */
	public static boolean isNameString(String s)
	{
		// if (isEmpty(s))
		// {
		// return true;
		// }
		// else
		// {
		// return Pattern.matches("[0-9a-zA-Z_.·()（）【】《》\u4E00-\u9FA5]+", s);
		// }
		// 放宽校验，校验规则同平台录入
		return RegexpUtils.validateText(s);
	}

	public static boolean isNumberString(String s)
	{
		if (isEmpty(s))
		{
			return true;
		}
		else
		{
			return Pattern.matches("-?\\d+", s);
		}
	}

	/**
	 * 校验是否11位手机号码
	 * 
	 * @param s
	 *            待校验手机号码字符串
	 * @return 是否匹配
	 */
	public static boolean isMobileString(String s)
	{
		if (isEmpty(s))
		{
			return true;
		}
		else
		{
			return Pattern.matches("\\d{11}", s);
		}
	}

	/**
	 * 提取文件的后缀
	 * 
	 * @param fileName
	 *            文件名
	 * @return 文件扩展名，无扩展名时返回空串
	 */
	public static String extractFileSuffix(String fileName)
	{
		String suffix = "";
		if (fileName != null)
		{
			int a = fileName.lastIndexOf(".");
			if (a > 0)
			{
				suffix = fileName.substring(a + 1);
			}
		}
		return suffix;
	}

	/**
	 * 用分隔符将字符串转为Long型数组
	 * 
	 * @param str
	 *            字符串列表
	 * @param regex
	 *            分隔符
	 * @return Long型数组，异常时返回NULL
	 */
	public static Long[] splitToLongArray(String str, String regex)
	{
		if (isNotEmpty(str))
		{
			String[] s_values = str.split(regex);
			Long[] l_values = new Long[s_values.length];
			for (int i = 0, size = s_values.length; i < size; i++)
			{
				String value = s_values[i];
				if (isNotEmpty(value))
				{
					try
					{
						l_values[i] = Long.valueOf(value.trim());
					}
					catch (NumberFormatException e)
					{
						LOGGER.warn(String.format("无法把%s转换成Long类型", value), e);
						return null;
					}
				}
			}

			return l_values;
		}
		return null;
	}

	/**
	 * 去掉字符串首尾空格
	 * 
	 * @param value
	 *            源字符串
	 * @return 去掉字符串首尾空格，字符串为NULL或空值时直接返回
	 */
	public static String trim(String value)
	{
		if (isEmpty(value))
		{
			return value;
		}
		else
		{
			return value.trim();
		}
	}

	/**
	 * 将Object对象转换为Long对象
	 * 
	 * @param o
	 *            源数据对象
	 * @return 目标Long型数据 异常时返回-1
	 */
	public static Long toLong(Object o)
	{
		Long def = -1L;
		String s = valueOf(o);
		if (s == null)
		{
			return def;
		}

		try
		{
			Long l = string2Long(s);
			if (l == null)
			{
				return def;
			}
			return l;
		}
		catch (Exception e)
		{
			return def;
		}
	}

	/**
	 * 将Object对象转换为Integer对象
	 * 
	 * @param o
	 *            源数据对象
	 * @return 目标Integer数据，异常时返回-1
	 */
	public static Integer toInteger(Object o)
	{
		Integer def = -1;
		String s = valueOf(o);
		if (s == null)
		{
			return def;
		}

		try
		{
			Integer l = string2Integer(s);
			if (l == null)
			{
				return def;
			}
			return l;
		}
		catch (Exception e)
		{
			return def;
		}
	}

	public static int[] parseVer(String strVer)
	{
		String[] vers = StringUtils.split(strVer, '.');
		int[] intVers = new int[vers.length];
		for (int i = 0; i < vers.length; i++)
		{
			intVers[i] = Integer.parseInt(vers[i]);
		}
		return intVers;
	}

	/***************************************************************************
	 * 比较版本号
	 * 
	 * @param ver1
	 * @param ver2
	 * @return 1 0 -1
	 */
	public static int compareVer(String ver1, String ver2)
	{
		String[] vers1 = StringUtils.split(ver1, '.');
		String[] vers2 = StringUtils.split(ver2, '.');
		int n = Math.max(vers1.length, vers2.length);
		for (int i = 0; i < n; i++)
		{
			Integer intVer1 = Integer.parseInt(vers1[i]);
			Integer intVer2 = Integer.parseInt(vers2[i]);
			if (!intVer1.equals(intVer2))
			{
				return intVer1.compareTo(intVer2);
			}
		}
		// 还未返回，说明前n位都一样
		if (vers1.length == vers2.length)
		{
			// 相等
			return 0;
		}
		else if (vers1.length > vers2.length)
		{
			return Integer.parseInt(vers1[n]) > 0 ? 1 : 0;
		}
		else
		// if (vers1.length < vers2.length)
		{
			return Integer.parseInt(vers2[n]) > 0 ? -1 : 0;
		}

	}

	/**
	 * 格式化HTML,过滤非法的HTML节点
	 * 
	 * @param content
	 *            原始内容
	 * @return 过滤后内容
	 */
	public static String formatHtml(String content)
	{
		Pattern pattern = Pattern.compile("(</?\\s*(.*?)>)", Pattern.CASE_INSENSITIVE);
		Matcher matcher = pattern.matcher(content);
		Pattern pi = Pattern.compile("(</?\\s*(P|I|B|STRONG|FONT|SPAN|DIV|STYLE|BR|HR)(.*?)>)",
				Pattern.CASE_INSENSITIVE);

		StringBuffer sub = new StringBuffer();
		int count = 0;
		while (matcher.find())
		{
			count++;
			String html = content.substring(matcher.start(), matcher.end());
			Matcher mi = pi.matcher(html);

			if (!mi.matches())
			{
				matcher.appendReplacement(sub, "");
			}
		}
		matcher.appendTail(sub);

		return sub.toString();
	}

	public static String random(int length)
	{
		char[] chs = new char[length];
		char[] strs = CS_ENCODE.toCharArray();
		for (int i = 0; i < length; i++)
		{
			Double ds = Math.random() * 72;
			chs[i] = strs[ds.intValue()];
		}
		return new String(chs);
	}
}
