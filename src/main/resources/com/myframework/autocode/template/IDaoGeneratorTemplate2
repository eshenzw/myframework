package ${classPackage}.dao;

import ${classPackage}.entity.${className};

/**
 * Created by MyFrameWork.AutoCode on ${.now?date}
 */
public interface ${iDaoName}  {
/**
     * 根据参数获取对象列表
     *
     * @param params
     * @return
     */
    public List<${className}> query${classNameWithoutEntity}List(Map<String, Object> params);

    /**
     * 根据参数获取对象列表结果
     *
     * @param params
     * @return
     */
    public int count(Map<String, Object> params);

    /**
     * 根据主键id获取对象
     *
     * @param id
     * @return
     */
    public ${className} get${classNameWithoutEntity}ByID(Serializable id);

    /**
     * 根据对象插入*所有字段*到db
     *
     * @param t
     * @return 插入结果（数量）
     */
    public int add${classNameWithoutEntity}(${className} t);

    /**
     * 根据对象有选择性的只插入*字段不为空*到db
     *
     * @param t  对象
     * @return 插入结果（数量）
     */
    public int add${classNameWithoutEntity}Selective(${className} t);

    /**
     * 根据主键ID查询并*更新所有字段*到db
     *
     * @param t
     * @return 更新结果（数量）
     */
    public int update${classNameWithoutEntity}(${className} t);

    /**
     * 根据主键ID查询并有选择性的只更新*字段不为空*到db
     *
     * @param t
     * @return 更新结果（数量）
     */
    public int update${classNameWithoutEntity}Selective(${className} t);

    /**
     * 根据主键ID查询并删除对象
     *
     * @param id
     * @return 删除结果（数量）
     */
    public int del${classNameWithoutEntity}ByID(Serializable id);

    /**
     * 根据主键ID查询并删除对象
     * 批量删除ID
     *
     * @param ids
     * @return 删除结果（数量）
     */
    public int batchDel${classNameWithoutEntity}ByIDs(Serializable[] ids);

    /**
     * 根据对象批量插入*所有字段*到db
     *
     * @param list
     * @return 插入结果（数量）
     * @deprecated 已经被删除的方法
     */
    public List<${className}> batchAdd${classNameWithoutEntity}(List<${className}> list);

    /**
     * 根据对象批量更新*所有字段*到db
     *
     * @param list
     * @return 更新结果（数量）
     * @deprecated 已经被删除的方法
     */
    public int batchUpdate${classNameWithoutEntity}(List<${className}> list);
}