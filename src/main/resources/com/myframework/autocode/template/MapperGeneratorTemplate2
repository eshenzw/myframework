<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- Created by MyFrameWork.AutoCode on ${.now?date} -->
<!-- 这里的namespace名字必须为执行该sql的dao地址 -->
<mapper namespace="${classPackage}.dao.${iDaoName}">
	<resultMap  id="${classNameWithoutEntity}ResultMap" type="${classPackage}.entity.${className}">
<#list properties as pro>
		<!-- ${pro.proDescription} -->
	<#if pro.proName == 'id'>
		<id  property="${pro.proName}" column="${pro.proColumnName}" />
	<#else>
		<result property="${pro.proName}" column="${pro.proColumnName}" />
	</#if>
</#list>
	</resultMap>
	<sql id="${classNameWithoutEntity}_Column_List" >
<#list properties as pro>
        ${pro.proColumnName}<#if pro_has_next>,</#if>
</#list>
    </sql>
    <sql id="${classNameWithoutEntity}_Where_Clause" >
        <isParameterPresent >
    <#list properties as pro>
            <isNotEmpty prepend="and" property="${pro.proName}" >
            ${pro.proColumnName}=${r'#{'}${pro.proName}}
            </isNotEmpty>
    </#list>
        </isParameterPresent>
    </sql>
    <select id="query${classNameWithoutEntity}List" resultMap="${classNameWithoutEntity}ResultMap" parameterType="java.util.Map" >
        select
        <include refid="${classNameWithoutEntity}_Column_List" />
        from ${prefixTableDbName}
        where 1=1
        <include refid="${classNameWithoutEntity}_Where_Clause" />
    </select>
    <select id="count" resultType="java.lang.Integer" parameterType="java.util.Map" >
        select count(1) from ${prefixTableDbName}
        where 1=1
        <include refid="${classNameWithoutEntity}_Where_Clause" />
    </select>
    <select id="get${classNameWithoutEntity}ByID" resultMap="${classNameWithoutEntity}ResultMap" parameterType="java.lang.Long" >
        select
        <include refid="${classNameWithoutEntity}_Column_List" />
        from ${prefixTableDbName}
        where id = ${r'#{id}'}
    </select>
    <insert id="add${classNameWithoutEntity}" parameterType="${classPackage}.entity.${className}" >
        insert into ${prefixTableDbName} (
        <#list properties as pro>
            ${pro.proColumnName}<#if pro_has_next>,</#if>
        </#list>
        )
        values (
        <#list properties as pro>
            ${r'#{'}${pro.proName}}<#if pro_has_next>,</#if>
        </#list>
        )
    </insert>
    <insert id="add${classNameWithoutEntity}Selective" parameterType="${classPackage}.entity.${className}" >
        insert into ${prefixTableDbName}
        <trim prefix="(" suffix=")" suffixOverrides="," >
        <#list properties as pro>
            <if test="${pro.proName} != null" >
                ${pro.proColumnName},
            </if>
        </#list>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
        <#list properties as pro>
            <if test="${pro.proName} != null" >
                ${r'#{'}${pro.proName}},
            </if>
        </#list>
        </trim>
    </insert>
    <update id="update${classNameWithoutEntity}" parameterType="${classPackage}.entity.${className}" >
        update ${prefixTableDbName}
        set
        <#list properties as pro>
            <#if pro.proName != 'id'>
            ${pro.proColumnName} = ${r'#{'}${pro.proName}}<#if pro_has_next>,</#if>
            </#if>
        </#list>
        where id = ${r'#{id}'}
    </update>
    <update id="update${classNameWithoutEntity}Selective" parameterType="${classPackage}.entity.${className}" >
        update ${prefixTableDbName}
        <set >
        <#list properties as pro>
            <if test="${pro.proName} != null" >
            ${pro.proColumnName} = ${r'#{'}${pro.proName}},
            </if>
        </#list>
        </set>
        where id = ${r'#{id}'}
    </update>
    <delete id="del${classNameWithoutEntity}ByID" parameterType="java.lang.Long" >
        delete from ${prefixTableDbName}
        where id = ${r'#{id}'}
    </delete>
    <delete id="batchDel${classNameWithoutEntity}ByIDs" parameterType="java.util.List" >
        delete from ${prefixTableDbName} where id in
        <foreach item="item" collection="ids" open="(" separator="," close=")">
            ${r'#{item}'}
        </foreach>
    </delete>
    <insert id="batchAdd${classNameWithoutEntity}" parameterType="java.util.List" >
        insert into ${prefixTableDbName} (
        <#list properties as pro>
            ${pro.proColumnName}<#if pro_has_next>,</#if>
        </#list>
        )
        values
        <foreach item="item" collection="list" index="index" separator="," close=";">
            (
            <#list properties as pro>
                ${r'#{item.'}${pro.proName}}<#if pro_has_next>,</#if>
            </#list>
            )
        </foreach>
    </insert>
    <update id="batchUpdate${classNameWithoutEntity}" parameterType="java.util.List" >
        <foreach collection="list" item="item" index="index" open="" close="" separator=";">
            update ${prefixTableDbName}
            set
            <#list properties as pro>
                <#if pro.proName != 'id'>
                ${pro.proColumnName} = ${r'#{item.'}${pro.proName}}<#if pro_has_next>,</#if>
                </#if>
            </#list>
            where id = ${r'#{item.id}'}
        </foreach>
    </update>
</mapper>